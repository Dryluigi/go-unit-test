name: Go CI

on:
  push:
    branches: [main]
  pull_request:

permissions:
  contents: read
  pull-requests: write

jobs:
  test:
    name: Test (Go 1.25.2)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25.2"
          check-latest: true
          cache: true

      - name: Clear GOCOVERDIR if set
        run: unset GOCOVERDIR

      - name: Download dependencies
        run: go mod download

      - name: Run unit tests with coverage
        run: |
          mkdir -p ./.coverage
          go test ./... -race -covermode=atomic -coverprofile=.coverage/coverage.out

      - name: Show total coverage and write summary
        id: cover
        run: |
          go tool cover -func=.coverage/coverage.out | tee ./.coverage/coverage.func.txt
          total=$(awk '/total:/ {print $3}' ./.coverage/coverage.func.txt)
          echo "total_coverage=$total" >> $GITHUB_OUTPUT
          {
            echo "### Coverage Summary"
            echo ""
            echo "- Total: **$total**"
            echo ""
            echo '```'
            cat ./.coverage/coverage.func.txt
            echo '```'
          } >> $GITHUB_STEP_SUMMARY

      - name: Comment coverage on PR
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const coverage = `${{ steps.cover.outputs.total_coverage }}`;
            const breakdown = fs.readFileSync('./.coverage/coverage.func.txt','utf8');
            const marker = '<!-- go-coverage-comment -->';
            const body = [
              marker,
              '### âœ… Go Coverage',
              '',
              `**Total:** **${coverage}**`,
              '',
              '<details><summary>Breakdown</summary>',
              '',
              '```txt',
              breakdown,
              '```',
              '</details>'
            ].join('\n');

            const {owner, repo} = context.repo;
            const issue_number = context.issue.number;
            const {data: comments} = await github.rest.issues.listComments({owner, repo, issue_number});
            const existing = comments.find(c => c.user.type === 'Bot' && c.body && c.body.includes(marker));

            if (existing) {
              await github.rest.issues.updateComment({owner, repo, comment_id: existing.id, body});
            } else {
              await github.rest.issues.createComment({owner, repo, issue_number, body});
            }

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-go1.25.2
          path: .coverage/coverage.out
          if-no-files-found: error
