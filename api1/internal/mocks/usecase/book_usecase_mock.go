// Code generated by MockGen. DO NOT EDIT.
// Source: api1/internal/usecase/book_usecase.go
//
// Generated by this command:
//
//	mockgen -source=api1/internal/usecase/book_usecase.go -destination=api1/internal/mocks/usecase/book_usecase_mock.go -package=usecase_mock
//

// Package usecase_mock is a generated GoMock package.
package usecase_mock

import (
	context "context"
	reflect "reflect"
	domain "unit-test-demo/api1/internal/domain"

	gomock "go.uber.org/mock/gomock"
)

// MockBookUsecase is a mock of BookUsecase interface.
type MockBookUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockBookUsecaseMockRecorder
	isgomock struct{}
}

// MockBookUsecaseMockRecorder is the mock recorder for MockBookUsecase.
type MockBookUsecaseMockRecorder struct {
	mock *MockBookUsecase
}

// NewMockBookUsecase creates a new mock instance.
func NewMockBookUsecase(ctrl *gomock.Controller) *MockBookUsecase {
	mock := &MockBookUsecase{ctrl: ctrl}
	mock.recorder = &MockBookUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookUsecase) EXPECT() *MockBookUsecaseMockRecorder {
	return m.recorder
}

// CreateBook mocks base method.
func (m *MockBookUsecase) CreateBook(ctx context.Context, in domain.CreateBookInput) (*domain.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", ctx, in)
	ret0, _ := ret[0].(*domain.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockBookUsecaseMockRecorder) CreateBook(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockBookUsecase)(nil).CreateBook), ctx, in)
}
